{"entries":[{"timestamp":1739412099420,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":37},{"diffs":[[0,"art\""],[-1," x=\"20\" y=\"20\""],[0,"></b"]],"start1":67,"start2":67,"length1":22,"length2":8},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":23,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n * DHT11\n */\n//% color=#ff7a4b icon=\"\\uf0ad\" block=\"DHT11\" weight=1\nnamespace dht11 {\n    export enum DHT11Type {\n        //% block=\"temperature(℃)\" enumval=0\n        DHT11_temperature_C,\n\n        //% block=\"temperature(℉)\" enumval=1\n        DHT11_temperature_F,\n\n        //% block=\"humidity(0~100)\" enumval=2\n        DHT11_humidity,\n    }\n\n    let dht11Humidity = 0\n    let dht11Temperature = 0\n\n    /**\n     * get dht11 temperature and humidity Value\n     * @param dht11pin describe parameter here\n     */\n    //% blockId=\"readdht11\" block=\"value of dht11 %dht11type| at pin %dht11pin\"\n    export function dht11value(dht11type: DHT11Type, dht11pin: DigitalPin): number {\n        const DHT11_TIMEOUT = 100\n        const buffer = pins.createBuffer(40)\n        const data = [0, 0, 0, 0, 0]\n        let startTime = control.micros()\n\n        if (control.hardwareVersion().slice(0, 1) !== '1') { // V2\n            // TODO: V2 bug\n            pins.digitalReadPin(DigitalPin.P0);\n            pins.digitalReadPin(DigitalPin.P1);\n            pins.digitalReadPin(DigitalPin.P2);\n            pins.digitalReadPin(DigitalPin.P3);\n            pins.digitalReadPin(DigitalPin.P4);\n            pins.digitalReadPin(DigitalPin.P10);\n\n            // 1.start signal\n            pins.digitalWritePin(dht11pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(dht11pin, PinPullMode.PullUp)\n            pins.digitalReadPin(dht11pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            startTime = control.micros()\n            while (pins.digitalReadPin(dht11pin) === 0) {\n                if (control.micros() - startTime > DHT11_TIMEOUT) break\n            }\n            startTime = control.micros()\n            while (pins.digitalReadPin(dht11pin) === 1) {\n                if (control.micros() - startTime > DHT11_TIMEOUT) break\n            }\n\n            for (let dataBits = 0; dataBits < 40; dataBits++) {\n                startTime = control.micros()\n                while (pins.digitalReadPin(dht11pin) === 1) {\n                    if (control.micros() - startTime > DHT11_TIMEOUT) break\n                }\n                startTime = control.micros()\n                while (pins.digitalReadPin(dht11pin) === 0) {\n                    if (control.micros() - startTime > DHT11_TIMEOUT) break\n                }\n                control.waitMicros(28)\n                if (pins.digitalReadPin(dht11pin) === 1) {\n                    buffer[dataBits] = 1\n                }\n            }\n        } else { // V1\n            // 1.start signal\n            pins.digitalWritePin(dht11pin, 0)\n            basic.pause(18)\n\n            // 2.pull up and wait 40us\n            pins.setPull(dht11pin, PinPullMode.PullUp)\n            pins.digitalReadPin(dht11pin)\n            control.waitMicros(40)\n\n            // 3.read data\n            if (pins.digitalReadPin(dht11pin) === 0) {\n                while (pins.digitalReadPin(dht11pin) === 0);\n                while (pins.digitalReadPin(dht11pin) === 1);\n\n                for (let dataBits = 0; dataBits < 40; dataBits++) {\n                    while (pins.digitalReadPin(dht11pin) === 1);\n                    while (pins.digitalReadPin(dht11pin) === 0);\n                    control.waitMicros(28)\n                    if (pins.digitalReadPin(dht11pin) === 1) {\n                        buffer[dataBits] = 1\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < 5; i++) {\n            for (let j = 0; j < 8; j++) {\n                if (buffer[8 * i + j] === 1) {\n                    data[i] += 2 ** (7 - j)\n                }\n            }\n        }\n\n        if (((data[0] + data[1] + data[2] + data[3]) & 0xff) === data[4]) {\n            dht11Humidity = data[0] + data[1] * 0.1\n            dht11Temperature = data[2] + data[3] * 0.1\n        }\n\n        switch (dht11type) {\n            case DHT11Type.DHT11_temperature_C:\n                return dht11Temperature\n            case DHT11Type.DHT11_temperature_F:\n                return (dht11Temperature * 1.8) + 32\n            case DHT11Type.DHT11_humidity:\n                return dht11Humidity\n        }\n    }\n}"],[0,"\n"]],"start1":0,"start2":0,"length1":4175,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":237,"start2":237,"length1":32,"length2":31}]}]},{"timestamp":1739412112171,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"core\":"],[1," \"*\",\n        \"radio\": \"*\",\n        \"microphone\":"],[0," \"*\"\n   "]],"start1":83,"start2":83,"length1":16,"length2":65}]}]},{"timestamp":1739412720249,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"re\":"],[-1," \"*\",\n        \"microphone\":"],[0," \"*\""]],"start1":87,"start2":87,"length1":35,"length2":8}]}]},{"timestamp":1739412763994,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\""],[-1," id=\"xa^MFLxJ^{+T4D=`S`Uk\""],[0," x=\""]],"start1":100,"start2":100,"length1":34,"length2":8},{"diffs":[[0,"ver\""],[-1," id=\"1`@N9u:,.X61,(NU5Sb|\""],[0," x=\""]],"start1":151,"start2":151,"length1":34,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," ],\n"],[-1,"    \"testFiles\": [\n        \"test.ts\"\n    ],\n"],[0,"    "]],"start1":210,"start2":210,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1739412099419,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"DHT11 - bplab\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1739412798574}